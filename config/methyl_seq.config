#!/bin/bash
# Author: Sung Gong <ssg29@cam.ac.uk>
# First created: 8/Jul/2014
# Last modified: 16/Feb/2016 
# Environment variables to run tophat and cufflink 
# Optimised and customised to run at the Darwin HPC

#####################################################
# GLOBAL
# Variables remain same across multiple bash script
#####################################################
export TOP=$HOME/Pipelines
source $TOP/config/global.config

##############################
### which species & version ##
##############################
export SPECIES='Homo_sapiens' # 'Homo_sapiens' or 'Mus_musculus' 
export VERSION=$SPECIES."v3"

#############
### SLURM ###
#############
export SL='SL2' # SL3, SL3-SHORT, SL2, SL2-LONG
source $TOP/config/slurm.config

#####################
### Run-specific  ###
#####################
################
## SureSelect ##
################
#export SLX="SLX-10409" # SLX-10409.Homo_sapiens.v3 (merger of v1 and v2, HC22NBBXX C876FANXX)
#export SLX="SLX-10409" # SLX-10409.Homo_sapiens.v2 (supported run 2, BS, PE125, SLX-10409.HC22NBBXX)
#export SLX="SLX-10409" # SLX-10409.Homo_sapiens.v1 (supported run 1, BS, PE125, SLX-10409.C876FANXX)
#export SLX="SLX-10404" # unsupported run (BS, PE125): poor mapping

############ 
# Fluidigm #
############ 
#export SLX="SLX-10295" # WGBS validation chr7+chr13 v2 (Fluidigm Access Array, oxBS+BS, PE250)
#export SLX="SLX-9797" # WGBS validation chr7+chr13 v1 (Fluidigm Access Array, oxBS+BS, PE300)
#export SLX="SLX-8773" # WGBS validation chr10 v3 (Fluidigm Access Array, oxBS+BS, PE150)
#export SLX="SLX-8772" # WGBS validation chr10 v2 (Fluidigm Access Array: BS, PE125)
#export SLX="SLX-8771" # WGBS validation chr10 v1 (Fluidigm Access Array: BS, PE300)

########
# WGBS #
########
#export SLX="SLX-8080"
#SLX-8074(PE150), SLX-8080(PE125)
#SLX-8075(PE100), SLX-8077(PE100), SLX-8081(PE125)
#export SLX="SLX-8074.SLX-8080" # e.g. SLX-8080 or SLX-8074.SLX-8080 for merging
#export SLX="SLX-8075.SLX-8077.SLX-8081" 

########
# PNAS #
########
# SRR530646(SE100), SRR530647(SE100)
#export SLX="SRR530646.SRR530647"
#export SLX="PNAS-2013" #ALL_BARCODES=(SRR530646 SRR530647)

export FASTQ_DIR=$HOME/data/fastq/$SLX
export LIB_SIZE_FILE=$TOP/data/mj.lib.size.txt
export IS_PE=1 # paired-end?
export NUM_CHUNK=1  # number of chunk to split fastq file
					# if 1, no splitting fastq (called by bin/template/fastq.split.sh)

# Fludigm Targetted (ox)BS-Seq
export IS_FLD=0 # Fluidigm assay?	

export TARGET=$TOP/data/S03770311/S03770311_Regions.bed # for SureSelect (target +-100bp) *NOT* used by bissnp.sh, only for coverage purpose (de-stranded overlap-merged target regions)
#export TARGET=$TOP/data/MJ.FLD/$SLX/mj.amplicon.coordinates.merged.bed    # used by bissnp.sh (de-stranded overlap-merged target regions)
#export TARGET2=$TOP/data/MJ.FLD/$SLX/mj.amplicon.coordinates.sorted.bed   # used by bissnp.sh (stranded per amplicon)

#############
## Barcode ##
#############
#export ALL_BARCODES=( $(for i in `ls $FASTQ_DIR/$SLX.*.fq.gz | grep -v lost`; do echo $i | cut -d'/' -f7 | cut -d'.' -f2 ; done | uniq) )
export ALL_BARCODES=(HAL01 HAL03 HAL46 HAL47 HAL95)

if [ $SLX == 'SLX-10295' ]; then # Fluidigm chr7+chr13 v2 
	export ALL_BARCODES=($(awk '$6=="q3"{print $2}' $HOME/Pipelines/data/MJ.FLD/$SLX/RnBeads.sample.sheet.txt))
	#export ALL_BARCODES=(FLD0114)
fi
if [ $SLX == 'SLX-8773' ]; then # Fluidigm v3
#	DONE=( $(awk '$6=="q2"||$6=="q1"{print $2,$3}' $HOME/Pipelines/data/MJ.FLD/$SLX/RnBeads.sample.sheet.txt) ) # q1 or q2
#	BLANK=(FLD0096 FLD0097 FLD0192 FLD0240 FLD0241) # blank sample (water?)
#	combined=("${ALL_BARCODES[@]}" "${DONE[@]}" "${BLANK[@]}")
#	NEW_BARCODES=$(printf '%s\n' "${combined[@]}" | sort | uniq -c | awk '$1==1{print $2}')
#	export ALL_BARCODES=(${NEW_BARCODES// / }) # split NEW_BARCODES (isa string) by a space (' ')
	export ALL_BARCODES=($(awk '$6=="q1"{print $2,$3}' $HOME/Pipelines/data/MJ.FLD/$SLX/RnBeads.sample.sheet.txt))
	#export ALL_BARCODES=(FLD0001 FLD0145) # test
fi

##
## Templates
##
MAPPING_T=$BIN_TOP/template/trim_bismark_template_hpc.v1.sh # called 'run_per_lane_mapping'
MAPPING_CHUNK_T=$BIN_TOP/template/trim_bismark_template_hpc.v3.sh # this can deal with splitted fastq files
SLURM_T=$BIN_TOP/template/slurm_template.v1.sh

if [ ! -f $MAPPING_T ];then
	echo "$MAPPING_T not found"
	exit
fi
if [ ! -f $MAPPING_CHUNK_T ];then
	echo "$MAPPING_CHUNK_T not found"
	exit
fi
if [ ! -f $SLURM_T ];then
	echo "$SLURM_T not found"
	exit
fi

####################
# CONTROL WORKFLOW #
####################
#############
## Mapping ##
#############
## Below used from template/per.lane.trim.bismark (aka. template/trim_bismark_template_hpc.v1.sh)
# Pre-precessing for QC
export RUN_FASTQC=0 # run initial fastqc for every fq.gz files
# run trim_galore for merged fq.gz
export RUN_TRIM_OLD=1 # by trim_galore
export RUN_TRIM_NEW=0 # by cutadapt
export RUN_FASTQC2=0 # run second fastqc after trimming
# Bismark mapping
export RUN_BM_ALN=1 # bismark mapping
# QC by MAPQ
export RUN_FLT_BY_MAPQ=1 # filter read by MAPQ
# QC for control 
export RUN_BS_EXPRESS=0 # bsExpress (only at Elephant at the mo) 
# QC for the library 
export RUN_PRESEQ=0 # run preseq 

#############################
## Per-lane merging/de-dup ##
#############################
## Below used from template/merge.perlane.bam.sh
# Merge Per Lane BAM
export RUN_MERGE_PER_LANE_BAM=1 # to merge more than two bam files from other lanes of the same flow cell
# Bismark De-Deuplicate
export RUN_BM_DEDUP=1 # deduplicate_bismark (disable this for Fludigm sequencing)
# samtool sort
export RUN_SAM_SORT_BY_COORD=1
# split bam file by chr
export RUN_SPLIT_BAM_BY_CHR=0

######################
## Sort Per-Chr BAM ##
######################
## Below used from template/sort.per.chr.bam.sh
export RUN_SAM_SORT_BY_NAME=1
export RUN_PICARD_RG_BY_CHR=0 # [depreciated] Add RG to your bam file to run bissnp per chromosome RG.bam 
export RUN_PICARD_RG_INDEX_BY_CHR=0 # [depricated] index RG added bam file to run bissnp per chromosome RG.bam

#############
## Calling ##
#############
# 1.Bismark methyl call
# template/bismark.caller.sh
# template/bismark.caller.by.chr.sh
export RUN_BM_METHYL=1 # bismark_methylation_extractor

# 2.Methylextract
# template/methylextract.sh or template/methylextract.per.chr.sh
export RUN_METHYL_EXT=1 # a main switch to control bin/methylextract.sh or bin/methylextract.per.chr.sh 
export RUN_METHYL_EXT_MAIN=1 # MethylExtract.pl
export RUN_METHYL_EXT_BSCR=0 # MethylExtractBSCR.pl
export RUN_METHYL_EXT_BSP=0 # MethylExtractBSPvalue.pl 

# 3.Bis-SNP 
# bin/template/bissnp.sh
export RUN_BIS_SNP=1 # main switch in bin/template/bissnp.sh or bin/template/bissnp.per.chr.sh
export RUN_BIS_SNP_NON_CPG=0 # main switch in bin/template/bissnp.sh or bin/template/bissnp.per.chr.sh 

export RUN_PICARD_RG=0 # Add RG to your bam file 
export RUN_BS_BASE_RECAL=0 # run BisulfiteCountCovariates and BisulfiteTableRecalibration 
export RUN_BS_BASE_RECAL_BAM=0 # run BisulfiteCountCovariates and BisulfiteTableRecalibration 
export RUN_BS_OPT=0
export RUN_BS_GENO=0 # run BisulfiteGenotyper
export RUN_BS_SORT=0 # run $HOME/bin/sortByRefAndCor.pl
export RUN_BS_FILTER=1 # run VCFpostprocess 
# bin/bissnp.per.chr.sh or bin/bissnp.non.cpg.per.chr.sh
export RUN_BS_GENO_BY_CHR=1 # run BisulfiteGenotyper using -L $Chr
export RUN_BS_SORT_BY_CHR=1 # run $HOME/bin/sortByRefAndCor.pl
export RUN_BS_FILTER_BY_CHR=1 # run VCFpostprocess 

##############
## Coverage ##
##############
# 4. coverage report
# template/cpg.coverage.report.sh 
# Bedtools to calculate genome coverage
export RUN_GENOME_COV=0 # bedtools genomecov  | coverageBed (bedtools coverage)
# for Bismark caller
export RUN_FORMAT_BED_BISMARK=0 # convert Bismark format to BED
export RUN_FORMAT_METHYLKIT_BISMARK=0 # convert Bismark format to MethylKit input
export RUN_CPG_COV_BISMARK=0  # methylation call in .bed format & CpG coveage (based on bismark_methyl_extract)
export RUN_CPG_MET_PCT_BISMARK=0 # % methylated CpG (based on bismark_methyl_extract)
# coverage report for BisSNP
export RUN_MERGE_BS_VCF=0 # merged per-chromosome VCF files
export RUN_CPG_COV_BISSNP=0  # CpG (homo-CpG)coveage (based on Bis-SNP)
export RUN_CPH_COV_BISSNP=0  # CpH (non-CpG) coveage (based on Bis-SNP)
export RUN_CPG_MET_PCT_BISSNP=0 # % methylated CpG (based on Bis-SNP)
export RUN_CPH_MET_PCT_BISSNP=0 # % methylated CpH (based on Bis-SNP)
export RUN_FORMAT_METHYLKIT_BISSNP=0 # convert VCF to MethylKit input
export RUN_FORMAT_VCF2BED_BISSNP=1 # convert VCF to RnBeads input (.bed format)

############################
## Per-Run Merging/De-dup ##
############################
# to merge more than two bam files from other flow cell or run
# template/merge.perrun.bam.sh
export RUN_MERGE_OTHER_BAM=1
export RUN_MERGE_OTHER_BAM_BY_CHR=0
export RUN_SAM_SORT_BY_COORD2=1
export RUN_BM_DEDUP2=0

####################
# TRIM & FILTERING #
####################
if [ $RUN_TRIM_OLD -eq 1 ]; then
# 1. illumina TruSeq HT Sample Kit D701–D712 adapters
# http://supportres.illumina.com/documents/documentation/chemistry_documentation/experiment-design/illumina-customer-sequence-letter.pdf
	export TR_ADAPTOR1='GATCGGAAGAGCACACGTCTGAACTCCAGTCAC' #len: 33 bp
					 # AGATCGGAAGAGC (chosen by the trim_galore '--illumina')
	export TR_ADAPTOR2=''
# 2. Fluidigm CS primer 
# https://www.fluidigm.com/binaries/content/documents/fluidigm/resources/aa-illumina-100-3770/aa-illumina-100-3770/fluidigm%3Afile (p54)
	#export TR_ADAPTOR1=ACACTGACGACATGGTTCTACA # Fluidigm CS1 
	#export TR_ADAPTOR2=TACGGTAGCAGAGACTTGGTCT # Fluidigm CS2
fi
if [ $RUN_TRIM_NEW -eq 1 ]; then
# 1. illumina TruSeq HT Sample Kit D701–D712 adapters
# http://cutadapt.readthedocs.org/en/latest/guide.html#illumina-truseq
	#export TR_ADAPTOR1= 'ATCGGAAGAGCACACGTCTGAACTCCAGTCAC' #len: 33 bp
	export TR_ADAPTOR1='AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC' #len: 33 bp (22/Se/2016)
	export TR_ADAPTOR2='AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT'
# 2. Fluidigm CS & TS primer 
	#export TR_ADAPTOR1=$TOP/data/MJ.FLD/$SLX/mj.amplicon.forward.fasta # forward (5'-end) primer sequence
	#export TR_ADAPTOR2=$TOP/data/MJ.FLD/$SLX/mj.amplicon.reverse.fasta # reverse (3'-end) primer sequence
	#export TR_ADAPTOR1=$TOP/data/MJ.FLD/$SLX/mj.cs.forward.fasta # forward (5'-end) primer sequence
	#export TR_ADAPTOR2=$TOP/data/MJ.FLD/$SLX/mj.cs.reverse.fasta # reverse (3'-end) primer sequence
fi
export TR_STRNCY=5 # --stringency (default: 1 for trim_galore, 3 for cutadapt) 
export TR_QUAL=20 # --quality: Phred score (default: 20)
export TR_LEN=20 # --length (default 20) # http://www.clinicalepigeneticsjournal.com/content/7/1/28
export TR_CLIP_LEN=5 # --clip_R1 (default off)

export MAPQ=1 # mapping quality to filter (via samtools view -q) or RUN_FLT_BY_MAPQ TRUE 

# deprecated options
export FLT_FQ_BIN=$BIN_TOP/fqextract.pl # to filter read by size
export FLT_FQ_LEN=70 # filter read if more than this length

#############
# BsExpress #
#############
export BS_EXP_WRAPPER=$BIN_TOP/bsExpress.sh
export BS_EXP_REF_DIR=$HOME/Install/bsExpress/control_reference
export BS_EXP_REF=$HOME/Install/bsExpress/control_reference/oxBS_controls-v1.0.fa

###########
# BISMARK #
###########
# For paired-end:
# Library is assumed to be strand-specific (directional), alignments to strands complementary to the original top or bottom strands will be ignored (i.e. not performed!)
# Standard alignments use a multi-seed length of 20bp with 0 mismatches, can be modified using the options -L and -N, respectively
# Standard alignments use the default minimum alignment score function L,0,-0.2
export GENOME_DIR=$HOME/data/UCSC/hg19b 
export REF_SEQ=$GENOME_DIR/hg19b.fa # samtools faidx hg19b.fa
export BM_BUFFER_SIZE=60G # --buffer_size (default: 2G) for bismark_methyl_extract
export BM_IGNORE1=10 # 0 (WGBS) '--ignore' from bismark_methylation_extractor: 
export BM_IGNORE2=10 # 8 (WGBS) '--ignore_r2' from bismark_methylation_extractor: 
					# this is based on results/SGA_v1/Bismark/MethylCall/A011/A011.r_1_val_1.fq.gz_bismark_bt2_pe.deduplicated.q20.M-bias.txt
					#it is recommended that the first couple of bp of Read 2 are removed before starting downstream analysis (source: from the manual) 

############
## PICARD ##
############
# also in config/taget.seq.sbs.config
export PICARD=$HOME/Install/picard # to be used by bin/bissnp.sh
export RG_CN=CamObsGynae
export RG_ORDER=coordinate
export RG_STRINGENCY=SILENT
export RG_MEM=60g

###########
## BIS-SNP
###########
export BIS_SNP_WRAPPER=$BIN_TOP/bissnp.sh
export BIS_SNP_NON_CPG_WRAPPER=$BIN_TOP/bissnp.non.cg.sh
export BIS_SNP_PER_CHR_WRAPPER=$BIN_TOP/bissnp.per.chr.sh
export BIS_SNP_NON_CPG_PER_CHR_WRAPPER=$BIN_TOP/bissnp.non.cpg.per.chr.sh
export BIS_SNP=$HOME/Install/BisSNP/BisSNP-0.82.2.jar
export BIS_SNP_COVARI=$HOME/Install/BisSNP/BisulfiteAnalyzeCovariates-0.69.jar
# perl ~/bin/sortByRefAndCor.pl --k 1 --c 2 ~/data/Annotation/cpgi.hg19.bed ~/data/UCSC/hg19b/hg19b.fa.fai > ~/data/Annotation/cpgi.hg19.sorted.bed
export BIS_CGI_FILE=$HOME/data/Annotation/cpgi.hg19.sorted.bed
export BIS_MEM=60g
export BIS_LOG_LEVEL=ERROR
export BIS_SNP_SORTER=$HOME/bin/sortByRefAndCor.pl
									        # java -jar $HOME/Install/picard/CreateSequenceDictionary.jar REFERENCE=hg19b.fa OUTPUT=hg19b.dict
export DBSNP=$HOME/data/dbSNP/$SPECIES/UCSC/GRCh37/common_all.vcf 
											# from ftp://ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/common_all.vcf.gz
											# http://www.ncbi.nlm.nih.gov/variation/docs/human_variation_vcf/#common_all
											# after downloading, 
											# perl -pi -e 's/^/chr/g unless /^#/g' common_all.vcf
											# perl -pi -e 's/^chrMT/chrM/g ' common_all.vcf
											# The chromosome order of dbSNP VCF file should be the same as your reference 
											# genome file and input BAM file's header
											# Otherwise, you could use the perl script 'sortByRefAndCor.pl'
export BIS_DCOV=1500    # --downsample_to_coverage <downsample_to_coverage>                
						# Coverage [integer] to downsample to at any given
						# locus; note that downsampled reads are randomly 
						# selected from all possible reads at a locus
export BIS_CALL_CONF=20 # the likelihood ratio criteria between best and second best genotype
						# Default value is 20 for high depth of coverage
						# For multiple samples with low coverage (more than 100 samples with 4X coverage), the
						# threshold could be defined lower than 10, or even 4. For ultra-high coverage sequencing, such as
						# 50X, you could specify higher threshold to obtain higher accuracy
export BIS_EMIT_CONF=0  # emission threshold
export BIS_MMQ=1        # -mmq,--min_mapping_quality_score < min mapping quality score >
						# minimum mapping quality score
				        # reads with minimum mapping quality score more than this value would be used for genotyping (Default:‘-mmq 30’)
export BIS_MBQ=20       # Minimum base mapping quality required to consider a base for calling. (Default: `-mbq 17')
				        # bases with minimum base quality score more than this value are used for genotyping and methylation calling
export BIS_MAXQ=50      # --max_quality_score (BisulfiteAnalyzeCovariates.jar) & -maxQ (BisulfiteTableRecalibration) 
						# default (50)
export BIS_MAXC=3000    # -toCoverage,--maximum read cov < maximum read cov >
					    # Maximum read coverage allowed. (Default: ‘-toCoverage 250’)
					    # -maxCov (for VCFpostprocess)
export BIS_OUTPUT_MODE="EMIT_ALL_CYTOSINES"  # Default: ‘-out modes DEFAULT FOR TCGA’
											 		 # EMIT ALL SITES: emit all of callable sites into vcf file.
												     # EMIT ALL CONFIDENT SITES: emit all of sites above emit confidant threshold into vcf file.
												 	 # EMIT VARIANTS ONLY: emit all of SNP sites above emit threshold into vcf file.
												 	 # EMIT ALL CPG: emit all of CpG sites above emit threshold into vcf file.
												 	 # EMIT ALL CYTOSINES: emit all of Cytosine sites above emit threshold into vcf file.
												 	 # EMIT HET SNPS ONLY: emit all of Heterozygous SNP sites above emit threshold into vcf file.
												 	 # EMIT VARIANT AND CYTOSINES: emit all of Cytosine sites above emit threshold into vcf1 file, and all of SNP sites above emit threshold into vcf2 file.
							 					 	 # DEFAULT FOR TCGA: emit all of CpG sites above emit threshold into vcf1 file, and all of SNP sites above emit threshold into vcf2 file.

#######################################
# data prep for -T BisulfiteGenotyper #
#######################################
# samtools faidx hg19b.fa
# java -jar $HOME/Install/picard/CreateSequenceDictionary.jar REFERENCE=hg19b.fa OUTPUT=hg19b.dict

##################
## MethylExtact ##
##################
export ME_DIR=$HOME/Install/MethylExtract
export ME_WRAPPER=$BIN_TOP/methylextract.sh
export ME_PER_CHR_WRAPPER=$BIN_TOP/methylextract.per.chr.new.sh
export ME_FLAGW='99,147' # for paired-end
export ME_FLAGC='83,163' # for paired-end
export ME_MINQ=20 # minimum allowed PHRED quality value for methylation and SNV calls. All positions with lower values are discarded (default minQ=20). 
export ME_MIN_MET=1 # Minimum depth for methylation calls: (default minDepthMeth=3)
export ME_MIN_SNV=1 # Minimum depth for SNV calls: (default minDepthSNV=1)
export ME_PE_OVERLAP='Y'
#Optional Quality parameters:
#  qscore=<fastq quality score: phred33-quals, phred64-quals,solexa-quals, solexa1.3-quals or NA> [default: phred33-quals]
#  delDup=<delete duplicated reads: Y or N> [default: N]
#  simDupPb=<number of similar nucleotides to detect a duplicated read> [default: 26]
#  FirstIgnor=<number of first bases ignored (5' end)> [default: 0]
#  LastIgnor=<number of last bases ignored (3' end)> [default:0]
#  peOverlap=<discard second mate overlapping segment on pair-end alignment reads: Y or N> [default: N]
#  minDepthMeth=<minimum number of reads requiered to consider a methylation value in a certain position> [default: 3]
#  minDepthSNV=<minimum number of reads requiered to consider a SNV value in a certain position> [default: 1]
#  minQ=<minimun PHRED quality per sequenced nucleotide> [default: 20]
#  methNonCpGs=<nonCpG contexts methylated to discard read> [default: 0.9] (methNonCpGs=0 deactivates bisulfite read check)
#  varFraction=<Minimum allele frequency> [default: 0.1]
#  maxStrandBias=<Maximum strand bias> [default: 0.7] (maxStrandBias=0 deactivates the threshold)
#  maxPval=<Variation p-value threshold> [default: 0.05]

#Optional parameters:
#  outFile=<Output file> [default: inFile.prob]
#  errorInterval=<Error interval allowed> [default: 0.2]
#  FDR=<False discovery rate allowed> [default: NA]

